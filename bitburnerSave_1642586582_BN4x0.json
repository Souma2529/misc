{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":216,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":175160.7893239206,\"strength_exp\":1.3919999999999997,\"defense_exp\":1.3919999999999997,\"dexterity_exp\":1.3919999999999997,\"agility_exp\":1.3919999999999997,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":10698838.209584184,\"city\":\"Chongqing\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"avmnite-02h\",\"purchasedServers\":[\"foo-0\",\"foo-1\",\"foo-2\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":69290.19999956776,\"ram\":1,\"totalMoneyGenerated\":178634.14199993166,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53057.599999800084,\"ram\":1,\"totalMoneyGenerated\":177211.13519991562,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53056.799999800096,\"ram\":1,\"totalMoneyGenerated\":177209.48219991563,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53056.199999800105,\"ram\":1,\"totalMoneyGenerated\":177219.8699999157,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53055.79999980011,\"ram\":1,\"totalMoneyGenerated\":177206.83739991556,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53055.399999800116,\"ram\":1,\"totalMoneyGenerated\":177208.68179991562,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53054.59999980013,\"ram\":1,\"totalMoneyGenerated\":177215.74619991568,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53054.39999980013,\"ram\":1,\"totalMoneyGenerated\":177206.54159991557,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53054.199999800134,\"ram\":1,\"totalMoneyGenerated\":177204.08819991557,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53053.399999800145,\"ram\":1,\"totalMoneyGenerated\":177213.10139991564,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53053.19999980015,\"ram\":1,\"totalMoneyGenerated\":177207.96839991558,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":41,\"moneyGainRatePerSecond\":3.5669999999999997,\"onlineTimeSeconds\":53052.99999980015,\"ram\":1,\"totalMoneyGenerated\":177202.88759991556,\"name\":\"hacknet-node-11\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Tian Di Hui\",\"Netburners\",\"NiteSec\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.087,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.14455384615384614,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":3.880199999999999,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":6.447101538461544,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":9600,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"lastUpdate\":1642586581954,\"totalPlaytime\":625140600,\"playtimeSinceLastAug\":69380200,\"playtimeSinceLastBitnode\":69380200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":23733253.41563781,\"hacknet\":2127940.482011774,\"hacknet_expenses\":-2085355.6893467777,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10697838.209584173,\"work\":0,\"servers\":-12078000,\"other\":-1000000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":23733253.41563781,\"hacknet\":2127940.482011774,\"hacknet_expenses\":-2085355.6893467777,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10697838.209584173,\"work\":0,\"servers\":-12078000,\"other\":-1000000,\"augmentations\":0}},\"scriptProdSinceLastAug\":23500681,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641969913047},{\"ID\":\"WORKOUT\",\"unlockedOn\":1641992652068},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641992952046},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642011509211},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642019602622},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642028315816},{\"ID\":\"NS2\",\"unlockedOn\":1642029369307},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642041161012},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642063911531},{\"ID\":\"TOR\",\"unlockedOn\":1642106306493},{\"ID\":\"FROZE\",\"unlockedOn\":1642111516796},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642113360701},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642114800705},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642114800707},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642114800708},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642146156248},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642146156258},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1642255680293},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642380577947},{\"ID\":\"DONATION\",\"unlockedOn\":1642381897941},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642408906525},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642412506531},{\"ID\":\"NITESEC\",\"unlockedOn\":1642412626533},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642412626535},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642455799458},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642497680568},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642501260297},{\"ID\":\"SF1.1\",\"unlockedOn\":1642517259155}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"95.9.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"b1t_flum3.exe\",\"DeepscanV1.exe\"],\"ramUsed\":17.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3737.6640000000343,\"onlineMoneyMade\":265621,\"onlineRunningTime\":7402.409999995587,\"pid\":2628,\"ramUsage\":5.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/24aab878-0f15-4a29-a144-9117c5265ed6\",\"moduleSequenceNumber\":161}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,206],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":16188,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":162}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,206],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":16189,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,206],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":16190,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":164}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.98;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target, { threads: 33 });\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"early.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"early.js\",\"url\":\"blob:file:///8db44edf-16d6-41cc-a948-3b585f38e45f\"}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"c15a21a0daeb11b20bc04971bd23fb9f22cc72ad7f9516fedfb976cce3edf806\",\"moduleSequenceNumber\":81,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\nvar target = \\\"joesguns\\\";\\r\\n\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.80;\\r\\n\\r\\nweaken(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n\\tif (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n\\t\\t// If the server's money is less than our threshold, grow it\\r\\n\\t\\tgrow(target);\\r\\n\\t\\tgetServerSecurityLevel(target);\\r\\n\\t\\tweaken(target);\\r\\n\\t} else {\\r\\n\\t\\t// Otherwise, hack it\\r\\n\\t\\thack(target);\\r\\n\\t\\tgetServerSecurityLevel(target);\\r\\n\\t\\tweaken(target);\\r\\n\\t}\\r\\n}\",\"filename\":\"early.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.3,\"server\":\"home\",\"_hash\":\"eee80f36891a63ecb2be330ba34603d7e715654f08bbef646059208ded3e3c5c\",\"moduleSequenceNumber\":82,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var currentServers = getPurchasedServers();\\r\\n\\r\\nfor (var i = 0; i < currentServers.length; ++i) {\\r\\n    var serv = currentServers[i];\\r\\n\\tscriptKill(\\\"early.script\\\", serv);\\r\\n\\tdeleteServer(serv);\\r\\n}\",\"filename\":\"kill-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"_hash\":\"99f3422df8acd8e0344a40c8b70a4c630e63b45b1cc47d9ff07bdc1a27ad05de\",\"moduleSequenceNumber\":83,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"while (true) {\\n\\tif (getServerSecurityLevel(\\\"n00dles\\\") > 10) {\\n\\t\\tweaken(\\\"n00dles\\\");\\n\\t}\\n\\telse {\\n\\t\\tgrow(\\\"n00dles\\\");\\n\\t\\thack(\\\"n00dles\\\");\\n\\t}\\n}\",\"filename\":\"early-n00dles.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"7b3c2536f375a2b2957ed561e220fb08c187ab99317b615093d5e12dae93cbad\",\"moduleSequenceNumber\":84,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\n// be 512GB.\\nvar ram = 512;\\n\\n// Iterator we'll use for our loop\\nvar i = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum\\n// amount of servers\\nwhile (i < getPurchasedServerLimit()) {\\n\\t// Check if we have enough money to purchase a server\\n\\tif (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\n\\t\\t// If we have enough money, then:\\n\\t\\t//  1. Purchase the server\\n\\t\\t//  2. Copy our hacking script onto the newly-purchased server\\n\\t\\t//  3. Run our hacking script on the newly-purchased server with 3 threads\\n\\t\\t//  4. Increment our iterator to indicate that we've bought a new server\\n\\t\\tvar hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\n\\t\\tscp(\\\"iron-gym.script\\\", hostname);\\n\\t\\texec(\\\"iron-gym.script\\\", hostname, 213);\\n\\t\\t++i;\\n\\t}\\n}\",\"filename\":\"early-purchase-server-512gb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"server\":\"home\",\"_hash\":\"05c09ab930069d4af89bd4c4501915dd63b2f13001c90231718feb3ab4f29911\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar hosts = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"phantasy\\\",\\n\\t\\t\\\"netlink\\\", \\\"summit-uni\\\", \\\"catalyst\\\", \\\"millenium-fitness\\\", \\\"crush-fitness\\\", \\\"harakiri-sushi\\\",\\n\\t\\t\\\"zer0\\\", \\\"neo-net\\\", \\\"silver-helix\\\", \\\"the-hub\\\", \\\"syscore\\\", \\\"rho-construction\\\", \\\"rothman-uni\\\",\\n\\t\\t\\\"alpha-ent\\\", \\\"aevum-police\\\", \\\"omega-net\\\", \\\"comptek\\\", \\\"johnson-ortho\\\", \\\"nectar-net\\\", \\\"iron-gym\\\", \\\"max-hardware\\\"];\\n\\tvar homeServer = ns.getHostname();\\n\\tvar homeRam = ns.getServerMaxRam(homeServer);\\n\\tvar constantRam = ns.getScriptRam(\\\"/newserver/OP.ns\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\n\\tvar rhosts = [];\\n\\tfor (let i = 0; i < hosts.length; i++) {\\n\\t\\tif (ns.hasRootAccess(hosts[i]) == true) {\\n\\t\\t\\trhosts.push(hosts[i]);\\n\\t\\t}\\n\\t}\\n\\tns.tprint(rhosts);\\n\\n\\tvar rhostsmps = [];\\n\\tfor (let i = 0; i < rhosts.length; i++) {\\n\\t\\t//prime server, this isn't optimal, need multiple runs for large servers\\n\\t\\tvar maxGrowThreads = Math.floor(0.50 * homeRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', homeServer, maxGrowThreads, rhosts[i], 0);\\n\\t\\tvar maxWeakenThreads = Math.floor(0.40 * homeRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', homeServer, maxWeakenThreads, rhosts[i], 0);\\n\\t\\tvar WeakenTime = Math.ceil(ns.getWeakenTime(rhosts[i]) / 1000) * 1000;\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t//calculate threads after priming\\n\\t\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(rhosts[i]));\\n\\t\\tvar growThreads = Math.ceil(ns.growthAnalyze(rhosts[i], 4));\\n\\t\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05);\\n\\t\\t//calculate ram and money\\n\\t\\tvar totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t\\tvar runs = (0.99 * 1024 * 1024 - constantRam) / totalRamForRun;\\n\\t\\tvar serverMaxMoney = ns.getServerMaxMoney(rhosts[i]);\\n\\t\\tvar mps = 0;\\n\\t\\tmps = (serverMaxMoney * 0.5) * (WeakenTime / (5 * WeakenTime + runs)) / 1000000;\\n\\t\\trhostsmps.push(mps);\\n\\t\\tns.tprint(rhosts[i] + \\\" mps: $\\\" + mps + \\\" mil\\\");\\n\\t}\\n\\tns.tprint(rhostsmps);\\n}\",\"filename\":\"orderedHosts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"orderedHosts.js\",\"url\":\"blob:file:///67379cd9-fe2f-4f40-bf68-bce35756371b\"}],\"dependents\":[],\"ramUsage\":5.3,\"server\":\"home\",\"_hash\":\"faa8257df8193fe79f6f9e823446827859ffffa754171932bbd6a461d47f193b\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":164}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":163}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":162}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tif (ns.getHostname() !== \\\"home\\\") {\\n\\t\\tthrow new Exception(\\\"Run the script from home\\\");\\n\\t}\\n\\n\\tawait ns.wget(\\n\\t\\t`https://raw.githubusercontent.com/moriakaice/bitburner/master/src/initHacking.ns?ts=${new Date().getTime()}`,\\n\\t\\t\\\"initHacking.ns\\\"\\n\\t);\\n\\tns.spawn(\\\"initHacking.ns\\\", 1);\\n}\",\"filename\":\"start.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"start.ns\",\"url\":\"blob:file:///9a78d757-3642-4611-84a8-d6ce9224f322\"}],\"dependents\":[],\"ramUsage\":3.65,\"server\":\"home\",\"_hash\":\"fa3fd738ec2c853cf6c57bf941aa21ac4704c8626af91ec0d82c905ddcb24342\",\"moduleSequenceNumber\":90,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: grow on ${target} in ${threads} threads`)\\n  await ns.grow(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"grow.ns\",\"url\":\"blob:file:///1729014b-8079-46fb-9506-cd8e3cf41d13\"}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"515f19734c4b9272c9618ff0aaf74ab85fd90117e5312cd24a79313f80ba8183\",\"moduleSequenceNumber\":91,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: hack on ${target} in ${threads} threads`)\\n  await ns.hack(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"67fe4507dfd98b652068f0925bd4d098b8d2d21defaecf1e28ac3ff3ec9e37b7\",\"moduleSequenceNumber\":92,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  const target = ns.args[0]\\n  const threads = ns.args[1]\\n  const delay = ns.args[2]\\n\\n  if (delay && delay > 0) {\\n    await ns.sleep(delay)\\n  }\\n\\n  ns.print(`Starting operation: weaken on ${target} in ${threads} threads`)\\n  await ns.weaken(target, { threads, stock: true })\\n  ns.exit()\\n}\\n\",\"filename\":\"weaken.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.ns\",\"url\":\"blob:file:///d8540e06-9891-40e3-8a32-f244548188ed\"}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"1d24f2f70130ee8da39ec0ec86a786bc27ef5b4da65e0b3fff064f5a3e6d47ff\",\"moduleSequenceNumber\":93,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const settings = {\\n  keys: {\\n    serverMap: 'BB_SERVER_MAP',\\n  },\\n}\\n\\nfunction getItem(key) {\\n  let item = localStorage.getItem(key)\\n\\n  return item ? JSON.parse(item) : undefined\\n}\\n\\nfunction localeHHMMSS(ms = 0) {\\n  if (!ms) {\\n    ms = new Date().getTime()\\n  }\\n\\n  return new Date(ms).toLocaleTimeString()\\n}\\n\\nfunction printPathToServer(servers, serverToFind) {\\n  if (serverToFind === 'home') return 'home'\\n  if (!servers[serverToFind]) return `-- Unable to locate ${serverToFind} --`\\n\\n  const jumps = []\\n\\n  let isParentHome = servers.parent === 'home'\\n  let currentServer = serverToFind\\n\\n  while (!isParentHome) {\\n    jumps.push(servers[currentServer].parent)\\n\\n    if (servers[currentServer].parent !== 'home') {\\n      currentServer = servers[currentServer].parent\\n    } else {\\n      isParentHome = true\\n    }\\n  }\\n\\n  jumps.unshift(serverToFind)\\n\\n  return jumps.reverse().join('; connect ')\\n}\\n\\nexport async function main(ns) {\\n  ns.tprint(`[${localeHHMMSS()}] Starting find.ns`)\\n\\n  const serverToFind = ns.args[0]\\n\\n  let hostname = ns.getHostname()\\n\\n  if (hostname !== 'home') {\\n    throw new Exception('Run the script from home')\\n  }\\n\\n  const serverMap = getItem(settings.keys.serverMap)\\n\\n  if (serverToFind) {\\n    if (Object.keys(serverMap.servers).includes(serverToFind)) {\\n      ns.tprint(`[${localeHHMMSS()}] Path to ${serverToFind} found:`)\\n      ns.tprint(printPathToServer(serverMap.servers, serverToFind))\\n    } else {\\n      ns.tprint(`[${localeHHMMSS()}] Unable to find the path to ${serverToFind}`)\\n    }\\n  } else {\\n    ns.tprint(`[${localeHHMMSS()}] Common servers:`)\\n    ns.tprint(`* CSEC (CyberSec faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'CSEC') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* avmnite-02h (NiteSec faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'avmnite-02h') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* I.I.I.I (The Black Hand faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'I.I.I.I') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* run4theh111z (Bitrunners faction)`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'run4theh111z') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`* w0r1d_d43m0n`)\\n    ns.tprint(printPathToServer(serverMap.servers, 'w0r1d_d43m0n') + '; hack;')\\n    ns.tprint('')\\n    ns.tprint(`[${localeHHMMSS()}] Looking for servers with coding contracts:`)\\n    Object.keys(serverMap.servers).forEach((hostname) => {\\n      const files = ns.ls(hostname)\\n      if (files && files.length) {\\n        const contract = files.find((file) => file.includes('.cct'))\\n\\n        if (!!contract) {\\n          ns.tprint('')\\n          ns.tprint(`* ${hostname} has a coding contract(s)! Connect using:`)\\n          ns.tprint(printPathToServer(serverMap.servers, hostname) + `; run ${contract};`)\\n        }\\n      }\\n    })\\n    ns.tprint('')\\n    ns.tprint('Buy all hacks command:')\\n    ns.tprint('home; connect darkweb; buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; home;')\\n    ns.tprint('')\\n  }\\n}\\n\",\"filename\":\"find.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"d98ff66c70334d13cae6575b9ef951ddebacc6a048b5e48928c12aafb090a2cb\",\"moduleSequenceNumber\":94,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar money = ns.args[1];\\n\\tvar threads = ns.hackAnalyzeThreads(server, money);\\n\\tns.tprint(threads);\\n}\",\"filename\":\"hackAnalyze.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackAnalyze.js\",\"url\":\"blob:file:///408484af-718d-4168-bde1-6da6408b90ed\"}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"569d8d0bbc42265002db2581d7a2277ab03a85b93a0faa934d9308f1d5a49ea8\",\"moduleSequenceNumber\":95,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"while (true) {\\r\\n\\thack(\\\"foodnstuff\\\")\\r\\n}\",\"filename\":\"hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"840d15484bbb1bea4d23648efdd84ccafb60dd4db5b344a67ad1ba420cc71fb1\",\"moduleSequenceNumber\":96,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"purchaseServer(\\\"foo-1\\\", 1048576);\",\"filename\":\"buy-server.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"server\":\"home\",\"_hash\":\"5ebc2d0f70fc412bb20658dbd784e8f51ea754824db7556479e29ee8e606f6f5\",\"moduleSequenceNumber\":97,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar target = \\\"foodnstuff\\\";\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.98;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target, { threads: 128 });\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"early-foodnstuff-8TB.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"5ca2c4135ad877bba4ca5f06a6bbe7bf1db7b610e45a06f677834f130275eb88\",\"moduleSequenceNumber\":98,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:https://danielyxie.github.io/1326c3a4-97e7-4347-a07d-6a1e33e7bf30\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":99,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet homeserver = ns.getHostname();\\n\\tlet purchasedServerRam = 1024 * 1024;\\n\\tlet bigboys = [\\\"zer0\\\", \\\"phantasy\\\", \\\"silver-helix\\\", \\\"omega-net\\\", \\\"the-hub\\\", \\\"comptek\\\"]\\n\\tlet i = 0;\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tlet maxGrowThreads = Math.floor(0.9 * ns.getServerMaxRam(homeserver) / growscriptRam);\\n\\tlet grown00dles = Math.ceil(ns.getGrowTime(\\\"n00dles\\\"));\\n\\t//first exp\\n\\tns.exec(\\\"RootAccessor.js\\\", homeserver, 1);\\n\\tawait ns.sleep(2000);\\n\\tns.exec('/newserver/grow.js', homeserver, maxGrowThreads, \\\"n00dles\\\", 0);\\n\\tawait ns.sleep(grown00dles + 2000);\\n\\t//early money\\n\\tns.exec(\\\"RootAccessor.js\\\", homeserver, 1);\\n\\tawait ns.sleep(2000);\\n\\tns.exec(\\\"/newserver/OP.js\\\", homeserver, 1, \\\"harakiri-sushi\\\");\\n\\tawait ns.sleep(2000);\\n\\t//buy servers and start the big boys\\n\\twhile (i < (bigboys.length)) {\\n\\t\\tif (ns.getServerMoneyAvailable(homeserver) > ns.getPurchasedServerCost(purchasedServerRam)) {\\n\\t\\t\\tns.purchaseServer(\\\"foo-\\\" + i, purchasedServerRam)\\n\\t\\t\\tawait ns.scp([\\\"/newserver/OP.js\\\", \\\"/newserver/hack.js\\\", \\\"/newserver/grow.js\\\", \\\"/newserver/weaken.js\\\"], \\\"foo-\\\" + i);\\n\\t\\t\\ti++;\\n\\t\\t\\t//need to manually path to each bigboy or code the tree\\n\\t\\t\\t//ns.connect(\\\"foo-\\\" + i);\\n\\t\\t\\t//ns.exec(\\\"/newserver/OP.js\\\", \\\"foo-0\\\", 1, bigboys[i]);\\n\\t\\t\\t//ns.connect(homeserver);\\n\\t\\t\\tns.exec(\\\"RootAccessor.js\\\", homeserver, 1);\\n\\t\\t}\\n\\t\\tawait ns.sleep(2000);\\n\\t}\\n}\",\"filename\":\"ezstart.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ezstart.js\",\"url\":\"blob:https://danielyxie.github.io/bc4fb49d-ceaf-403d-9b5b-bb72be1c3842\"}],\"dependents\":[],\"ramUsage\":6.35,\"server\":\"home\",\"_hash\":\"68875ced6201557eb50a3b9cda87eb3bb1f438e59ab6554b91699d3062337105\",\"moduleSequenceNumber\":100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport function allServers(ns, removePurchased = true) {\\n\\tif (removePurchased) var pservs = ns.getPurchasedServers();\\n\\tconst nodes = new Set;\\n\\tfunction dfs(node) {\\n\\t\\tnodes.add(node);\\n\\t\\tfor (const neighbor of ns.scan(node)) {\\n\\t\\t\\tif (removePurchased) {\\n\\t\\t\\t\\tif (!pservs.includes(neighbor)) {\\n\\t\\t\\t\\t\\tif (!nodes.has(neighbor)) {\\n\\t\\t\\t\\t\\t\\tdfs(neighbor);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!nodes.has(neighbor)) {\\n\\t\\t\\t\\t\\tdfs(neighbor);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tdfs(\\\"home\\\");\\n\\treturn [...nodes];\\n}\",\"filename\":\"lib-getServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"37cc73aea833a4ac573ec83e43257e4ea804fdc9f110e3638e01d3d4d01b6180\",\"moduleSequenceNumber\":101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { allServers } from \\\"./lib-getServers.js\\\";\\n\\nexport async function main(ns) {\\n\\tvar approved = [];\\n\\tvar deniedhack = [];\\n\\tvar deniedports = [];\\n\\tvar denied = [];\\n\\tvar other = [];\\n\\tvar files = [0, 0, 0, 0, 0];\\n\\tvar maxPorts = 0;\\n\\n\\t//suppress all default log messages\\n\\tns.tail(); ns.disableLog('ALL'); ns.clearLog();\\n\\n\\t//check for help argument.\\n\\tif (ns.args.includes(\\\"-h\\\")) { help(ns); return; }\\n\\tns.print(\\\"For script help use argument '-h' \\\");\\n\\n\\tns.print(\\\"Executing...\\\");\\n\\n\\t//process argument calls\\n\\tvar target = [];\\n\\tif (ns.args.length > 0) {\\n\\t\\tif (ns.args[0] === \\\"-s\\\") {\\n\\t\\t\\ttarget = await allServers(ns);\\n\\t\\t} else {\\n\\t\\t\\ttarget = ns.args;\\n\\t\\t}\\n\\t} else {\\n\\t\\ttarget = await allServers(ns);\\n\\t}\\n\\n\\t//check max ports available to open\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) { files[0] = 1; maxPorts++; ns.print(\\\"BruteSSH.exe file exists\\\"); } else { ns.print(\\\"BruteSSH.exe not found\\\"); }\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) { files[1] = 1; maxPorts++; ns.print(\\\"FTPCrack.exe file exists\\\"); } else { ns.print(\\\"FTPCrack.exe not found\\\"); }\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) { files[2] = 1; maxPorts++; ns.print(\\\"relaySMTP.exe file exists\\\"); } else { ns.print(\\\"relaySMTP.exe not found\\\"); }\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) { files[3] = 1; maxPorts++; ns.print(\\\"HTTPWorm.exe file exists\\\"); } else { ns.print(\\\"HTTPWorm.exe not found\\\"); }\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) { files[4] = 1; maxPorts++; ns.print(\\\"SQLInject.exe file exists\\\"); } else { ns.print(\\\"SQLInject.exe not found\\\"); }\\n\\tns.print(\\\"Maximum ports able to open: [\\\" + maxPorts + \\\"]\\\\n\\\");\\n\\n\\t//open all ports and attempt root access\\n\\tfor (const n of target) {\\n\\t\\tif (ns.serverExists(n)) {\\n\\t\\t\\tconst serverHackLvl = ns.getServerRequiredHackingLevel(n);\\n\\t\\t\\tconst playerHackingLvl = ns.getHackingLevel();\\n\\n\\t\\t\\tif (playerHackingLvl >= serverHackLvl) {\\n\\t\\t\\t\\tif (files[0]) { ns.brutessh(n); }\\n\\t\\t\\t\\tif (files[1]) { ns.ftpcrack(n); }\\n\\t\\t\\t\\tif (files[2]) { ns.relaysmtp(n); }\\n\\t\\t\\t\\tif (files[3]) { ns.httpworm(n); }\\n\\t\\t\\t\\tif (files[4]) { ns.sqlinject(n); }\\n\\n\\t\\t\\t\\tgainRootAccess(n, maxPorts, approved, deniedports, denied, other, ns);\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdenied.push(n);\\n\\t\\t\\t\\tdeniedhack.push(\\\"[DENIED] - hack level too low [\\\" + playerHackingLvl + '/' + serverHackLvl + \\\"] for \\\" + n);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t//output results\\n\\tif (deniedhack.length > 0) ns.print(deniedhack.join(\\\"\\\\n\\\"));\\n\\tif (deniedports.length > 0) ns.print(deniedports.join(\\\"\\\\n\\\"));\\n\\tif (other.length > 0) ns.print(\\\"[ALREADY ACQUIRED ROOT ACCESS] for \\\" + other.join(\\\"\\\\n[ALREADY ACQUIRED ROOT ACCESS] for \\\"));\\n\\tif (approved.length > 0) ns.print(\\\"[ROOT ACCESS APPROVED] for \\\" + approved.join(\\\"\\\\n[ROOT ACCESS APPROVED] for \\\"));\\n\\n\\tif (ns.args.includes(\\\"-s\\\")) {\\n\\t\\tns.print(\\\"Copiable list of rooted servers:\\\\n\\\" + approved.join(\\\" \\\") + other.join(\\\" \\\"));\\n\\t}\\n}\\n\\nfunction gainRootAccess(server, portCount, approved, deniedports, denied, other, ns) {\\n\\tif (!ns.hasRootAccess(server)) {\\n\\t\\tif (portCount >= ns.getServerNumPortsRequired(server)) {\\n\\t\\t\\tns.nuke(server);\\n\\t\\t\\tapproved.push(server);\\n\\t\\t} else {\\n\\t\\t\\tdenied.push(server);\\n\\t\\t\\tdeniedports.push(\\\"[ROOT ACCESS DENIED] for \\\" + server + \\\" - Not enough open PORTS\\\");\\n\\t\\t}\\n\\t} else {\\n\\t\\tother.push(server);\\n\\t}\\n}\\n\\nfunction help(ns) {\\n\\tconst text = [\\n\\t\\t\\\"<========================HELP=====================>\\\\n\\\",\\n\\t\\t\\\"- Script takes in [N] arguments or none at all.\\\",\\n\\t\\t\\\"  [N]: server names that you wish to be rooted.\\\",\\n\\t\\t\\\"  e.g.: run rootAccessor.ns n00dles joesguns zer0\\\\n\\\",\\n\\t\\t\\\"- No args will attempt root access on all servers\\\\n\\\",\\n\\t\\t\\\"- include argument '-s' as an argument to print\\\",\\n\\t\\t\\\"  copiable list of all rooted servers\\\\n\\\",\\n\\t\\t\\\"<=================================================>\\\"\\n\\t];\\n\\tns.print(text.join(\\\"\\\\n\\\"));\\n}\",\"filename\":\"RootAccessor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"lib-getServers.js\",\"url\":\"blob:https://danielyxie.github.io/c2e0b715-b9ae-4162-a823-1633379eb2dd\"},{\"filename\":\"RootAccessor.js\",\"url\":\"blob:https://danielyxie.github.io/0b9af175-39e6-4ca2-aefb-83666fc42de4\"}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"_hash\":\"be2ddcaaf462c0fbd79aa6e75ae20fe42b22ee020e9837092e188af6d740be22\",\"moduleSequenceNumber\":102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\nexport async function main(ns) {await ns.grow(ns.args[0])}\",\"filename\":\"/scripts/grow.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"34ab53e2a3bee159c489071e28ab0c3a6509ccc0b5a386074539475b919dd734\",\"moduleSequenceNumber\":103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\nexport async function main(ns) {await ns.weaken(ns.args[0])}\",\"filename\":\"/scripts/weak.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weak.ns\",\"url\":\"blob:file:///28b6945c-812a-4a6a-9df0-c0795d73dbe7\"}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"12d77a222b4eb8c38a3438802d5b90d15529f7c191f08c25a7405e686624b507\",\"moduleSequenceNumber\":104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns**/\\nexport async function main(ns) {await ns.hack(ns.args[0])}\",\"filename\":\"/scripts/hack.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"9004138a35aab2de558e914ee54f83fabb7243a7f08431feccb26a948efffd1e\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet homeserver = ns.getHostname();\\n\\t//buy servers and start the big boys\\n\\tlet purchasedServerRam = 1024 * 1024;\\n\\tlet bigboys = [\\\"zer0\\\", \\\"phantasy\\\", \\\"johnson-ortho\\\", \\\"netlink\\\"]\\n\\tlet i = 0;\\n\\twhile (i < bigboys.length) {\\n\\t\\tif (ns.getServerMoneyAvailable(homeserver) > ns.getPurchasedServerCost(purchasedServerRam)) {\\n\\t\\t\\tns.purchaseServer(\\\"goo-\\\" + i, purchasedServerRam)\\n\\t\\t\\tawait ns.scp([\\\"/newserver/OP.js\\\", \\\"/newserver/hack.js\\\", \\\"/newserver/grow.js\\\", \\\"/newserver/weaken.js\\\"], \\\"goo-\\\" + i);\\n\\t\\t\\ti++;\\n\\t\\t\\t//need to manually path to each bigboy or code the tree\\n\\t\\t\\t//ns.connect(\\\"foo-\\\" + i);\\n\\t\\t\\t//ns.exec(\\\"/newserver/OP.js\\\", \\\"foo-0\\\", 1, bigboys[i]);\\n\\t\\t\\t//ns.connect(homeserver);\\n\\t\\t}\\n\\t\\tawait ns.sleep(2000);\\n\\t}\\n}\",\"filename\":\"ezstart-temp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ezstart-temp.js\",\"url\":\"blob:file:///653d96ab-0603-4d22-b190-8a817e7b4cf7\"}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"_hash\":\"c8e49c28f5f97596827bfe5180edee5c7db4617f4aa062bb2f4031ce60eed677\",\"moduleSequenceNumber\":106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Uses a DFS to find the path to the specified server and then prints the path to Terminal.\\r\\ntarget = args[0];\\r\\nvisited = [];\\r\\nstack = [];\\r\\nparentTracker = [];\\r\\norigin = getHostname();\\r\\nstack.push(origin);\\r\\n\\r\\nwhile (stack.length > 0) {\\r\\n\\tnode = stack.pop();\\r\\n\\tprint(\\\"DFS processing server \\\" + node);\\r\\n\\tif (visited.includes(node)) {\\r\\n\\t\\t//Do nothing. Essentially a \\\"continue\\\" but that doesn't exist yet\\r\\n\\t} else {\\r\\n\\t\\tif (node == target) { break; }\\r\\n\\t\\tvisited.push(node);\\r\\n\\t\\tnextNodes = scan(node);\\r\\n\\t\\tfor (i = 0; i < nextNodes.length; ++i) {\\r\\n\\t\\t\\tstack.push(nextNodes[i]);\\r\\n\\t\\t\\t//Keep track of the nodes \\\"parent\\\" so we can re-create the path\\r\\n\\t\\t\\t//Ignore entries that start at the origin\\r\\n\\t\\t\\tif (nextNodes[i] != origin) {\\r\\n\\t\\t\\t\\tpair = [nextNodes[i], node];\\r\\n\\t\\t\\t\\tparentTracker.push(pair);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\nprint(\\\"Target found. About to re-create path\\\");\\r\\nprint(\\\"parentTracker size: \\\" + parentTracker.length);\\r\\npath = [];\\r\\ni = target;\\r\\nwhile (i != getHostname()) {\\r\\n\\tpath.push(i);\\r\\n\\tprint(\\\"Re-creating path at \\\" + i);\\r\\n\\t//Search through the parentTracker array to find this nodes parent\\r\\n\\tfor (j = 0; j < parentTracker.length; ++j) {\\r\\n\\t\\tpair = parentTracker[j];\\r\\n\\t\\tif (pair[0] == i) {\\r\\n\\t\\t\\ti = pair[1];\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\npath.reverse();\\r\\ntprint(path);\",\"filename\":\"DFS.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"server\":\"home\",\"_hash\":\"1c139130b148ae3f3d9a8b391798ba98cd2ab6712a25688ec8f4b7ec914028d8\",\"moduleSequenceNumber\":107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6958}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"home\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar scpfiles = [\\\"/newserver/OP.js\\\", \\\"/newserver/start.js\\\", \\\"/newserver/hack.js\\\", \\\"/newserver/grow.js\\\",\\n\\t\\t\\\"/newserver/weaken.js\\\"];\\n\\tvar servers0port0node = [\\\"foodnstuff\\\", \\\"sigma-cosmetics\\\", \\\"joesguns\\\", \\\"hong-fang-tea\\\", \\\"harakiri-sushi\\\"];\\n\\tvar otherEarlyServers = [\\\"nectar-net\\\", \\\"iron-gym\\\", \\\"max-hardware\\\", \\\"zer0\\\", \\\"neo-net\\\"];\\n\\tns.exec(\\\"RootAccessor.js\\\", ns.getHostname(), 1);\\n\\tawait ns.sleep(1000);\\n\\t//copy early start files\\n\\tvar i = 0;\\n\\twhile (i < servers0port0node.length) {\\n\\t\\tawait ns.scp(scpfiles, servers0port0node[i]);\\n\\t\\ti++;\\n\\t}\\n\\tvar i = 0;\\n\\twhile (i < otherEarlyServers.length) {\\n\\t\\tawait ns.scp(scpfiles, otherEarlyServers[i]);\\n\\t\\ti++;\\n\\t}\\n\\t//run early start files to attack foodnstuff\\n\\tvar i = 0;\\n\\twhile (i < servers0port0node.length) {\\n\\t\\twhile (ns.hasRootAccess(servers0port0node[i]) == false) {\\n\\t\\t\\tawait ns.sleep(10000);\\n\\t\\t\\tns.exec(\\\"RootAccessor.js\\\", ns.getHostname(), 1);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tns.connect(servers0port0node[i]);\\n\\t\\tns.exec(\\\"/newserver/start.js\\\", servers0port0node[i], 1, \\\"foodnstuff\\\");\\n\\t\\ti++;\\n\\t\\tns.connect(\\\"home\\\");\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\t//var i = 0;\\n\\t//while (i < otherEarlyServers.length) {\\n\\t//\\ti++;\\n\\t//\\tawait ns.sleep(1000);\\n\\t//}\\n}\",\"filename\":\"ezstart-stage1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"ezstart-stage1.js\",\"url\":\"blob:https://danielyxie.github.io/d07b50bb-2abe-4711-8f21-f8f3bfaf3b42\"}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"_hash\":\"472635fa55e333c428012b8580898538715892f924ee9854b9f107bec88e44e7\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/3af6350a-0374-41d9-9db2-54cc13452ad3\",\"moduleSequenceNumber\":3692}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":9878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"foo-0\",\"foo-1\",\"foo-2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-123845.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"26.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24221890709.25,\"moneyMax\":90832090159.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1164,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"90.2.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43481006767.5,\"moneyMax\":163053775378.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1113,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"30.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":12144347521.5,\"moneyMax\":45541303205.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":980,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"56.2.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":29498873376.75,\"moneyMax\":110620775162.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1100,\"serverGrowth\":57}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599628.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[114,116,181,186,27,126,164,95,150,36,83,182,193,12,183,125,178,109,158,94],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"84.1.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20575900570.5,\"moneyMax\":77159627139.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1139,\"serverGrowth\":67}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"92.6.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":12038409149.25,\"moneyMax\":45144034309.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1109,\"serverGrowth\":60}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"29.8.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":13785076301.25,\"moneyMax\":51694036129.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":931,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247307.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[9,73,189,177,63,67,90,190,1,177,65,157,122,136,145,121,49,75,115,19,189,24,193,58,118]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"35.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":16302319507.5,\"moneyMax\":61133698153.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1157,\"serverGrowth\":85}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375361-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,0],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,1,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45218-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[83,48,131,186,17,22,46,157,77,112,157,95,140,3,17,155,117,31,183,31,118,60,106,86,34,88,142,187,65,99,56,10,107,90,69,66],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"77.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":18533778840.75,\"moneyMax\":69501670652.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1093,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"53.7.1.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1208921634.75,\"moneyMax\":4533456130.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1158,\"serverGrowth\":90}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-455144.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[8,5],[8,3,9],[9,9,4,3]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"20.4.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1456,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"42.0.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":859671596.25,\"moneyMax\":3223768485.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1050,\"serverGrowth\":70}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"4.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":711244353,\"moneyMax\":2667166323.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"94.5.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":564683256,\"moneyMax\":2117562210,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":931,\"serverGrowth\":41}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-90204.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[46,34,32,25,24,34,24,20,25,48,46,32,49,29],[19,48,26,18,44,22,3,2,40,13,1,18,1,33],[9,7,38,5,30,16,15,5,33,18,4,17,36,16],[1,6,23,13,9,34,15,1,34,31,45,25,11,36],[11,34,31,19,36,24,47,24,31,1,23,25,26,20]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68028.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[63,13,53,14,191,45,198,4,38,77,128,193,197]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"19.8.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":557479973.25,\"moneyMax\":2090549899.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"71.8.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":545302810.5,\"moneyMax\":2044885539.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":72}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"9.1.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":679321845.75,\"moneyMax\":2547456921.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"78.2.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":867572300.25,\"moneyMax\":3253396125.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-7044.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[49,17,31,44,10,14,29,31,16,15,39,17,37],[35,47,36,37,30,19,47,15,3,41,13,12,20],[31,33,21,5,47,19,35,38,24,48,4,48,30]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"93.9.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":660313517.25,\"moneyMax\":2476175689.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"30.6.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":403759788,\"moneyMax\":1514099205,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":87}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"64.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":656997371.25,\"moneyMax\":2463740142.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"16.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":635346394.5,\"moneyMax\":2382548979.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"52.1.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":787949820.75,\"moneyMax\":2954811827.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-296869.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())(()(()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"27.7.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":748323938.25,\"moneyMax\":2806214768.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":941,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"83.5.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":734546554.5,\"moneyMax\":2754549579.375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-556638.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[49,97,70,124,100,172,58,196,57,96,177],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"53.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":586615977.75,\"moneyMax\":2199809916.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-870740.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[22,90,54,58,148,83,165,86,66,22,145,139,113,70,123,11,197,96,94,170,195,24,139,193,58,117,168,163,86]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"85.4.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":610556718,\"moneyMax\":2289587692.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"99.0.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1248151880.25,\"moneyMax\":4680569550.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"15.8.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1269200804.25,\"moneyMax\":4759503015.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":81}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664404.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[82,121,37,93,139,103,156,134,191,51,82,121,41,17,109,65,109,162,126,28,149,76,182,200,52,39,84,35,18,178,183,145,66,78,104,194,181,120,129,165]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"35.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":905834616.75,\"moneyMax\":3396879812.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":75}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-911878.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,1,9,0,2,7,0,7,0,0,0,9,10,1,7,4,0,8,5,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"22.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1029003910.5,\"moneyMax\":3858764664.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325004.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"58.0.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":766699776,\"moneyMax\":2875124160,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"31.4.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":535890765.75,\"moneyMax\":2009590371.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":720,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"34.8.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":392276615.25,\"moneyMax\":1471037307.1875,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":503,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"98.4.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":536796649.5,\"moneyMax\":2012987435.625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":593,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765418.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[4,2],[7,6,9],[8,6,7,9],[1,4,5,6,1],[6,2,5,6,3,6]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"20.4.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":210790377,\"moneyMax\":790463913.75,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":32}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423716.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[4,9],[4,9,5],[3,4,9,5],[4,3,3,2,3],[9,2,5,9,6,3],[7,5,8,4,6,2,2],[5,5,7,7,8,6,4,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"67.1.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":172958085,\"moneyMax\":648592818.75,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":417,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"52.3.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":684589294.5,\"moneyMax\":2567209854.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":730,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"72.8.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":235162890.75,\"moneyMax\":881860840.3125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":450,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"71.5.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":302576250.75,\"moneyMax\":1134660940.3125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":649,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318911.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[9,22,35,4,21,6,13,4,32,20,35],[11,15,42,38,33,4,33,24,3,26,15],[48,23,19,37,11,17,16,37,4,25,45],[29,34,19,22,39,44,39,15,7,27,26],[32,26,45,1,21,18,33,30,24,13,22],[32,14,10,29,15,14,10,20,46,13,6],[34,3,41,40,14,32,15,43,19,6,27],[23,25,49,27,30,39,45,10,18,33,44],[37,1,36,11,27,49,14,3,42,23,28]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"2.1.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":296852759.25,\"moneyMax\":1113197847.1875,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":52}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885971.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[186,102,183,184,10,33,34,183,102,115,8,111,169,166,147,88,27,73,103,128,7,182,86,16,73,98,61,5,8,49,131,107,179,173,81,42,200,69,57]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"9.6.9.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":125095998,\"moneyMax\":469109992.5,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":292,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-588827-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[13,14,9,34,21,28,49,28,27,50,25,10,44],[46,1,44,43,34,20,2,28,30,7,7,36,32],[24,18,41,38,12,18,14,4,44,1,2,3,14],[10,27,15,31,22,6,27,37,14,2,22,20,3]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"60.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":184877562.75,\"moneyMax\":693290860.3125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":380,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"19.0.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":382,\"serverGrowth\":63}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405264.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,5,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"95.9.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":54453504.75,\"moneyMax\":204200642.8125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":252,\"serverGrowth\":65}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-338896.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[75,135,160,93,112,112,44,136,140]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"26.3.0.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":196875,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-591029.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[2,111,44,200,151,86,23,187,159,71,69,112,114,129,39,36,90,48,106,64,12,122,195,54,189],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377994.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(()a((()()(()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"45.6.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,472,472]},\"filename\":\"manual.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2446.8480000000022,\"onlineMoneyMade\":0,\"onlineRunningTime\":5731.609999997107,\"pid\":5604,\"ramUsage\":1.95,\"server\":\"foodnstuff\",\"threads\":8,\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":9984}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":170}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:https://danielyxie.github.io/1326c3a4-97e7-4347-a07d-6a1e33e7bf30\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"foodnstuff\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":171}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":172}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6054}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"foodnstuff\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":9984}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"foodnstuff\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":9984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2267769.0720727863,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"9.0.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,464,472]},\"filename\":\"manual.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2426.1120000000024,\"onlineMoneyMade\":0,\"onlineRunningTime\":5690.809999997144,\"pid\":5672,\"ramUsage\":1.95,\"server\":\"sigma-cosmetics\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":173}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":174}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":175}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:https://danielyxie.github.io/1326c3a4-97e7-4347-a07d-6a1e33e7bf30\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6055}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"sigma-cosmetics\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":10093}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"sigma-cosmetics\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":10093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"63.9.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,464,464]},\"filename\":\"manual.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2405.3760000000025,\"onlineMoneyMade\":0,\"onlineRunningTime\":5641.209999997189,\"pid\":5757,\"ramUsage\":1.95,\"server\":\"joesguns\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":176}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":178}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":177}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:https://danielyxie.github.io/1326c3a4-97e7-4347-a07d-6a1e33e7bf30\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"joesguns\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6056}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"joesguns\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":10203}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"joesguns\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":10203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-853762.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":499541780,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"13.6.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":17.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3882.816000000036,\"onlineMoneyMade\":271184,\"onlineRunningTime\":7674.809999995339,\"pid\":2252,\"ramUsage\":5.5,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,214],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16239,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6445}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,214],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16240,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6446}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,214],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16241,\"ramUsage\":1.7,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6447}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"zer0\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6444}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"zer0\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6447}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":6447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6446}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":6446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6445}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":6445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"54.0.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,464,472]},\"filename\":\"manual.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2426.1120000000024,\"onlineMoneyMade\":0,\"onlineRunningTime\":5709.809999997126,\"pid\":5623,\"ramUsage\":1.95,\"server\":\"nectar-net\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"nectar-net\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6347}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"nectar-net\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":6342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":6344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":6346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":10092}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"nectar-net\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":10092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"77.0.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"neo-net\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = 0.99 * ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * 1) + (growscriptRam * 2) + (weakenscriptRam * 1);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tif ((0.99 * maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, 2, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"neo-net\",\"_hash\":\"9f4a14b63f069b733ce477bc7b006e729f6f5247f9f4cf50b783c1712ff4c61d\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"67.9.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":54.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15041.375999999973,\"onlineMoneyMade\":1065992,\"onlineRunningTime\":7455.409999995539,\"pid\":2546,\"ramUsage\":5.5,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,829],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":16194,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6855}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,829],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":16195,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24573,829],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":16196,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6857}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,830],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":16224,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6855}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,830],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":16225,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,830],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":16226,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6857}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,831],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":16230,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6855}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,831],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":16231,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,831],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":16232,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6857}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,832],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"pid\":16236,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6855}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,832],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"pid\":16237,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,832],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.00999999999998,\"pid\":16238,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6857}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6855}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":6855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6857}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":6857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6856}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":6856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6854}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"silver-helix\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-300803-Netburners.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[25,57,18,100,47,17,49,106,100,118,93,69,20,16,35]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"65.2.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,464,464]},\"filename\":\"manual.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2405.3760000000025,\"onlineMoneyMade\":0,\"onlineRunningTime\":5629.0099999972,\"pid\":5800,\"ramUsage\":1.95,\"server\":\"hong-fang-tea\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":179}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":180}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":181}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:https://danielyxie.github.io/1326c3a4-97e7-4347-a07d-6a1e33e7bf30\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"hong-fang-tea\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6057}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"hong-fang-tea\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":10204}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"hong-fang-tea\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":10204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-88952.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"22.4.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,464,464]},\"filename\":\"manual.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2405.3760000000025,\"onlineMoneyMade\":0,\"onlineRunningTime\":5618.00999999721,\"pid\":5807,\"ramUsage\":1.95,\"server\":\"harakiri-sushi\",\"threads\":8,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":182}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":184}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":183}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newserver/OP.js\",\"url\":\"blob:https://danielyxie.github.io/1326c3a4-97e7-4347-a07d-6a1e33e7bf30\"}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"harakiri-sushi\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6150}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"harakiri-sushi\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.weaken(\\\"foodnstuff\\\");\\n\\t\\tawait ns.grow(\\\"foodnstuff\\\");\\n\\t\\tawait ns.sleep(ns.getWeakenTime(\\\"foodnstuff\\\") + 1000);\\n\\t}\\n}\",\"filename\":\"manual.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"manual.js\",\"url\":\"blob:https://danielyxie.github.io/cfe9e581-1b06-4e19-bf6d-8d8dc643cc1a\",\"moduleSequenceNumber\":10205}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"harakiri-sushi\",\"_hash\":\"5f84cd14016bbabfea40adfe4e239ab86c44e2b8fdbcc232ad8888a6f72855eb\",\"moduleSequenceNumber\":10205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"94.6.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":17.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3810.2400000000353,\"onlineMoneyMade\":268612,\"onlineRunningTime\":7529.609999995471,\"pid\":2443,\"ramUsage\":5.5,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,210],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":16212,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6743}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,210],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":16213,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6744}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,210],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":16214,\"ramUsage\":1.7,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6745}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6742}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"phantasy\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6744}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":6744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6745}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":6745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6743}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":6743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"23.7.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":17.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3846.5280000000357,\"onlineMoneyMade\":269541,\"onlineRunningTime\":7619.809999995389,\"pid\":2316,\"ramUsage\":5.5,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,212],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16242,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6543}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,212],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16243,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6544}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,212],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16244,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6545}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"max-hardware\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6542}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"max-hardware\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6545}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":6545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6544}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":6544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6543}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":6543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"70.8.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":50965149,\"moneyMax\":191119308.75,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":183,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"6.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":39437451,\"moneyMax\":147890441.25,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":241,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-214153.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-10,9,8,9,-7,-7,10,4,-1,-7,-3,8,-7,2,8,4,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"68.5.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":17.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3955.392000000037,\"onlineMoneyMade\":272955,\"onlineRunningTime\":7853.209999995177,\"pid\":2040,\"ramUsage\":5.5,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,218],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":16218,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6152}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,218],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":16219,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6153}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,218],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":16220,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6154}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar contstantRam = ns.getScriptRam(\\\"/newserver/OP.js\\\");\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - contstantRam;\\n\\tvar ms = ns.getServerMinSecurityLevel(hackServer);\\n\\tvar cs = ns.getServerSecurityLevel(hackServer);\\n\\tvar ma = ns.getServerMoneyAvailable(hackServer);\\n\\tvar mm = ns.getServerMaxMoney(hackServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\t//prime the server\\n\\twhile (ma < mm) {\\n\\t\\tvar maxGrowThreads = Math.floor(0.90 * maxRam / growscriptRam);\\n\\t\\tns.exec('/newserver/grow.js', hostServer, maxGrowThreads, hackServer, 0);\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tawait ns.sleep(GrowTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t\\tma = ns.getServerMoneyAvailable(hackServer);\\n\\t}\\n\\twhile (cs > ms) {\\n\\t\\tvar maxWeakenThreads = Math.floor(0.90 * maxRam / weakenscriptRam);\\n\\t\\tns.exec('/newserver/weaken.js', hostServer, maxWeakenThreads, hackServer, 0);\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\tcs = ns.getServerSecurityLevel(hackServer);\\n\\t}\\n\\t//thread calculations\\n\\tvar hackThreads = Math.floor(0.50 / ns.hackAnalyze(hackServer)); //hack 50% of the money available\\n\\t//initial hack to calculate correct grow threads\\n\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, 0);\\n\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\tawait ns.sleep(HackTime + 1000);\\n\\tvar growThreads = Math.ceil(ns.growthAnalyze(hackServer, 4)); //number of threads needed to increase the money available by the specified multiplicative factor\\n\\tvar weakenThreads = Math.ceil(((hackThreads * 0.002 * 2) + (growThreads * 0.004 * 2)) / 0.05); //number of threads to undo the hack and grow threads security increase\\n\\t//prime the server\\n\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, 0);\\n\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, 0);\\n\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\tawait ns.sleep(WeakenTime + 1000);\\n\\t//ram per run\\n\\tvar totalRamPerRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads);\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate sleeps\\n\\t\\tvar runSleep = 230;\\n\\t\\tvar wsleep = 0; //sleep time for weaken\\n\\t\\tvar gsleep = ((WeakenTime - GrowTime - 30)); //sleep time for grow to beat weaken\\n\\t\\tvar hsleep = ((WeakenTime - HackTime - 60)); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\tvar UsedRam = ns.getServerUsedRam(hostServer);\\n\\t\\tif ((0.95 * maxRam - UsedRam) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, weakenThreads, hackServer, wsleep, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growThreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, hackThreads, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(WeakenTime + 1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"iron-gym\",\"_hash\":\"8fae53fd0c20b0a9b133231ea7f171806440ab1880f58c678366b1f74224b5dc\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6151}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"iron-gym\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":6154}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":6154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":6153}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":6153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":6152}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":6152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"40.5.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":495,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"34.2.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1000,\"serverGrowth\":60}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"34.4.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":50}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"48.1.9.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":517,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"34.2.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":361,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"79.2.7.9\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":214,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"58.2.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":528,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"46.7.2.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"88.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"26.5.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"37.3.6.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"foo-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foo-0\",\"httpPortOpen\":false,\"ip\":\"8.6.1.9\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer);\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"foo-0\",\"_hash\":\"00a806260a6c896ce585edb552ebdb67eaac9721d6f8a3b7eb13df340a7c15e3\",\"moduleSequenceNumber\":5474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foo-0\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":1875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foo-0\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":1876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foo-0\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":1877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"foo-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foo-1\",\"httpPortOpen\":false,\"ip\":\"61.3.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":54.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16021.151999999985,\"onlineMoneyMade\":1097680,\"onlineRunningTime\":7966.609999995074,\"pid\":1916,\"ramUsage\":5.5,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/6ec71c86-82c1-42b1-86ed-6df061bb5bd3\",\"moduleSequenceNumber\":5571}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,883],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":16197,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3243}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,883],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":16198,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24573,883],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"pid\":16199,\"ramUsage\":1.7,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3245}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,884],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16245,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3243}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,884],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16246,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,884],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.409999999999982,\"pid\":16247,\"ramUsage\":1.7,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3245}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,885],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":16248,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3243}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,885],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":16249,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,885],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.809999999999985,\"pid\":16250,\"ramUsage\":1.7,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3245}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,886],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":16251,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3243}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,886],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":16252,\"ramUsage\":1.75,\"server\":\"foo-1\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3244}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,886],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":16253,\"ramUsage\":1.7,\"server\":\"foo-1\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3245}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":5960}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"foo-1\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":5960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3245}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foo-1\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":3245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3244}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foo-1\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":3244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3243}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foo-1\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":3243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"foo-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foo-2\",\"httpPortOpen\":false,\"ip\":\"43.1.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":115.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/newserver/start.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35888.83199999898,\"onlineMoneyMade\":2460531,\"onlineRunningTime\":7952.009999995087,\"pid\":1929,\"ramUsage\":5.5,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/24aab878-0f15-4a29-a144-9117c5265ed6\",\"moduleSequenceNumber\":3793}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1978],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":16191,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,1978],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":16192,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,1978],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":16193,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1979],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":16200,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6533,1979],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":16201,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24586,1979],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.609999999999967,\"pid\":16202,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1980],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":16203,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6532,1980],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":16204,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24582,1980],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"pid\":16205,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1981],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":16206,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6531,1981],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":16207,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24579,1981],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.60999999999997,\"pid\":16208,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1982],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":16209,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6530,1982],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":16210,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24572,1982],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":16211,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1983],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":16215,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,1983],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":16216,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,1983],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.609999999999975,\"pid\":16217,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1984],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":16221,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,1984],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":16222,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,1984],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":16223,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1985],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":16227,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6529,1985],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":16228,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24571,1985],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.609999999999978,\"pid\":16229,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",0,1986],\"dataMap\":{},\"filename\":\"/newserver/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.20999999999998,\"pid\":16233,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6531,1986],\"dataMap\":{},\"filename\":\"/newserver/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.20999999999998,\"pid\":16234,\"ramUsage\":1.75,\"server\":\"foo-2\",\"threads\":5,\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",24579,1986],\"dataMap\":{},\"filename\":\"/newserver/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.20999999999998,\"pid\":16235,\"ramUsage\":1.7,\"server\":\"foo-2\",\"threads\":1,\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\tvar hackServer = ns.args[0];\\n\\tvar hostServer = ns.getHostname();\\n\\tvar hackscriptRam = ns.getScriptRam(\\\"/newserver/hack.js\\\");\\n\\tvar growscriptRam = ns.getScriptRam(\\\"/newserver/grow.js\\\");\\n\\tvar weakenscriptRam = ns.getScriptRam(\\\"/newserver/weaken.js\\\");\\n\\tvar maxRam = ns.getServerMaxRam(hostServer) - ns.getServerUsedRam(hostServer);\\n\\tvar HackTime = 0;\\n\\tvar GrowTime = 0;\\n\\tvar WeakenTime = 0;\\n\\tvar hackfactor = 0;\\n\\tvar growthreads = 0;\\n\\tvar runSleep = 500;\\n\\tvar gsleep = 0;\\n\\tvar hsleep = 0;\\n\\t//ram per run\\n\\tvar totalRamPerRun = 0;\\n\\t//run\\n\\tvar i = 0;\\n\\twhile (true) {\\n\\t\\t//update server time stats\\n\\t\\tHackTime = Math.ceil(ns.getHackTime(hackServer));\\n\\t\\tGrowTime = Math.ceil(ns.getGrowTime(hackServer));\\n\\t\\tWeakenTime = Math.ceil(ns.getWeakenTime(hackServer));\\n\\t\\t//calculate grow threads for 1 hack thread\\n\\t\\thackfactor = ns.hackAnalyze(hackServer) + 1;\\n\\t\\tgrowthreads = Math.ceil(ns.growthAnalyze(hackServer, hackfactor));\\n\\t\\t//calculate sleeps\\n\\t\\tgsleep = (WeakenTime - GrowTime - 50); //sleep time for grow to beat weaken\\n\\t\\thsleep = (WeakenTime - HackTime - 100); //sleep time for hack to beat grow\\n\\t\\t//start runs, sleep if not enough ram\\n\\t\\ttotalRamPerRun = (hackscriptRam * 1) + (growscriptRam * growthreads) + (weakenscriptRam * 1);\\n\\t\\tif ((maxRam - ns.getServerUsedRam(hostServer)) > totalRamPerRun) {\\n\\t\\t\\tns.getServerMoneyAvailable(hackServer);\\n\\t\\t\\tns.getServerSecurityLevel(hackServer);\\n\\t\\t\\tns.exec('/newserver/weaken.js', hostServer, 1, hackServer, 0, i);\\n\\t\\t\\tns.exec('/newserver/grow.js', hostServer, growthreads, hackServer, gsleep, i);\\n\\t\\t\\tns.exec('/newserver/hack.js', hostServer, 1, hackServer, hsleep, i);\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tawait ns.sleep(runSleep);\\n\\t}\\n}\",\"filename\":\"/newserver/start.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/start.js\",\"url\":\"blob:https://danielyxie.github.io/dbf5d122-d63b-4d91-a4fb-831c8f576a02\",\"moduleSequenceNumber\":6053}],\"dependents\":[],\"ramUsage\":5.5,\"server\":\"foo-2\",\"_hash\":\"9fe5ede819b07b98c0af367a317126c3acba8d420dfbc27099677ba76e0ed41f\",\"moduleSequenceNumber\":6053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.hack(server);\\n}\",\"filename\":\"/newserver/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/hack.js\",\"url\":\"blob:https://danielyxie.github.io/69deb3c7-76ea-4c38-a515-7e65801efcf7\",\"moduleSequenceNumber\":3796}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foo-2\",\"_hash\":\"e88937cda15804591f0efba5cb46d0fce4f48b0c9b679212e2ad87d479fe1331\",\"moduleSequenceNumber\":3796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.grow(server);\\n}\",\"filename\":\"/newserver/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/grow.js\",\"url\":\"blob:https://danielyxie.github.io/1a5daded-4d45-414e-8090-b0e3e22babc1\",\"moduleSequenceNumber\":3795}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foo-2\",\"_hash\":\"b7b6bdd2286fcd6e330377df5c261a1f0f56ff11852afe5b6fe8f22f47e6c68d\",\"moduleSequenceNumber\":3795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar server = ns.args[0];\\n\\tvar sleeptime = ns.args[1];\\n\\tawait ns.sleep(sleeptime);\\n\\tawait ns.weaken(server);\\n}\",\"filename\":\"/newserver/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newserver/weaken.js\",\"url\":\"blob:https://danielyxie.github.io/c0f8a72f-432d-45ef-a1f6-ba12e6dd8ce7\",\"moduleSequenceNumber\":3794}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foo-2\",\"_hash\":\"af49f94fcd3d0b52f9e8353830b3214213f9e3be359bcdd222f9bb87a9464d71\",\"moduleSequenceNumber\":3794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":0.48333333333333334}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":2561.0383333327923}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":19040.787207684196}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":5821.230825632179}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"RootAccessor\":\"run RootAccessor.js\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":18,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642586582078","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642586582095"}}